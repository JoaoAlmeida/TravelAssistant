package framework;

import java.util.Objects;
import util.SpatialUtils;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author joao
 */
public class SpatialObject implements Comparable<Object>{

    private Long id;
    private String name;    
    private String idWiki;
    private String idOsm;
    private Double latitude;
    private Double longitude;
    private String text;
    private String category;        
    private String subCategory;
    private String img;
    private double distance = 0;
    
    public SpatialObject(Long id, String idW, String idO, Double lat, Double lgt, String name, String cat, String subCategory, String text){
        this.id = id;
        this.latitude = lat;
        this.longitude = lgt;       
        this.name = name;        
        this.category = cat;
        this.idWiki = idW;
        this.idOsm = idO;
        this.text = text;         
        this.subCategory = subCategory;
        this.img = "-";
    }
    
    public double getDistance(){
        return distance;
    }
    
    public void setDistance(double d){
        distance = d;
    }
    
    public String getText() {
        return text;
    }

    public void setSubCategory(String subC){
        subCategory = subC;
    }
    
    public String getSubCategory(){
        return subCategory;
    }
    public void setText(String text) {
        this.text = text;
    }
    
    public void setImg(String img){
        this.img = img;
    }

    public String getImg(){
        return img;
    }
    
    public String getIdWiki() {
        return idWiki;
    }

    public String getIdOsm() {
        return idOsm;
    }

    public void setIdOsm(String idO) {
        idOsm = idO;
    }

    public void setIdWiki(String idW) {
        idWiki = idW;
    }

    public long getId() {
        return id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String cat) {
        category = cat;
    }

    public void setLatitude(Double lat) {
        this.latitude = lat;
    }

    public void setLongitude(Double lgt) {
        this.longitude = lgt;
    }

    public double getLatitude() {
        return latitude;
    }

    public double getLongitude() {
        return longitude;
    }

    public void show() {
        System.out.println(id + " " + idWiki + " " + idOsm + " " + latitude
                + " " + longitude + " " + name + " " + category + " " + text);
    }

    @Override
    public boolean equals(Object o) {
        if(o instanceof SpatialObject){
            
                SpatialObject aux = (SpatialObject) o;
                
                double distance = SpatialUtils.haversineDistance(getLatitude(), getLongitude(), 
                        aux.getLatitude(), aux.getLongitude());
                                
                if(distance < 100 && (getName().toLowerCase().equals(aux.getName().toLowerCase()))){
                    return true;
                }
            
            
        }
        return false;
    }

    @Override
    public int hashCode() {
        
        int hash = 7;
        if(!this.idWiki.equals("-")){
            hash = 43 * hash + Objects.hashCode(this.idWiki);
        }else{
            hash = 43 * hash + Objects.hashCode(this.id);
        }
        return hash;
    }

    @Override
    public int compareTo(Object o) {
        //Verifica se o objeto é um lance.
        if (o instanceof SpatialObject) {
            SpatialObject aux = (SpatialObject) o;
            //Compara os valores dos lances.
            if (this.getDistance() < aux.getDistance()) {
                return -1;
            } else if (this.getDistance() > aux.getDistance()) {
                return 1;
            } else {
                return 0;
            }
        } else {
            throw new RuntimeException("Objeto incompatível"); 
        }
    }
    
}
